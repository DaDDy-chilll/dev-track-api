generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model m_project {
  id           Int           @id @default(autoincrement())
  name         String
  image_id     Int?          @unique
  status       ProjectStatus @default(PLANING)
  created_at   DateTime      @default(now())
  updated_at   DateTime      @default(now())
  color        String?       @default("#2196F3")
  isNew        Boolean?      @default(true)
  member_count Decimal?      @default(0) @db.Decimal
  task_count   Decimal?      @default(0) @db.Decimal
  image        t_image?      @relation(fields: [image_id], references: [id])
  project_file_url String?
  tasks        t_task[]
}

model t_image {
  id         Int        @id @default(autoincrement())
  filename   String
  mimetype   String
  url        String
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  project    m_project?
}

model t_task {
  id         Int          @id @default(autoincrement())
  name       String
  priority   TaskPriority
  status     TaskStatus
  progress   Int          @default(0)
  created_at DateTime     @default(now())
  updated_at DateTime     @default(now())
  project_id Int?
  start_date DateTime?
  end_date DateTime?
  due_time   DateTime   
  branch_name String? @default("main")
  category   TaskCategory @default(FEAUTURE)
  project    m_project?   @relation(fields: [project_id], references: [id])
}

model t_project_task_status {
  id         Int        @id @default(autoincrement())
  project_id Int
  status     TaskStatus
  count      Int        @default(0)
  date       DateTime   @default(now())
  month      String?
}

model t_allowed_device {
  id         Int      @id @default(autoincrement())
  ip_address String?  @unique
  mac_address String? @unique
  device_name String?
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@index([ip_address])
  @@index([mac_address])
}

enum ProjectStatus {
  PLANING
  DEVELOPMENT
  COMPLETED
  MAINTENANCE
  HOLDING
  FINISHED
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  DONE
  IN_REVIEW
  IN_TEST
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}


enum TaskCategory {
FEAUTURE
BUG
REFACTOR
TEST
ERROR
}
